{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Bmi","props","state","height","weight","bmiValue","textWeightness","handleChange","bind","handleSubmit","rankOfWeightness","event","result","target","value","alert","this","setState","name","Math","pow","weightness","class","preventDefault","num","onSubmit","for","required","type","id","onChange","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAMMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,OAAQ,GACRC,SAAU,EACVC,eAAgB,IAElB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBAVP,E,gDAanB,SAAaG,GACX,IAAIC,EAASD,EAAME,OAAOC,MACtBF,EAAS,EACXG,MAAM,4CAGRC,KAAKC,SAAL,eAAiBN,EAAME,OAAOK,KAAON,M,0BAGvC,SAAaD,GACX,MAAmCK,KAAKd,MAAlCC,EAAN,EAAMA,OAAQC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,SAEtBA,EAAWD,EAASe,KAAKC,IAAIjB,EAAS,IAAK,GAC3C,IAAIkB,EAAaL,KAAKN,iBAAiBL,GACvCW,KAAKC,SAAS,CACZX,eACE,sBAAKgB,MAAM,4BAAX,UACG,IACD,6BAAKD,IACL,gDAAmBhB,UAIzBM,EAAMY,mB,8BAGR,SAAiBC,GACf,OAAIA,EAAM,KACD,eACEA,EAAM,GACR,gBACEA,EAAM,GACR,aACEA,EAAM,GACR,UAEA,mB,oBAIX,WACE,OACE,gCACE,oBAAIF,MAAM,kBAAV,6BACA,sBAAKA,MAAM,YAAX,UACE,qBAAKA,MAAM,gCAAX,SACE,uBAAMG,SAAUT,KAAKP,aAArB,UACE,sBAAKa,MAAM,OAAX,UACE,uBAAOI,IAAI,SAASJ,MAAM,aAA1B,0BAGA,uBACEK,UAAQ,EACRC,KAAK,SACLV,KAAK,SACLI,MAAM,eACNO,GAAG,SACHf,MAAOE,KAAKd,MAAMC,OAClB2B,SAAUd,KAAKT,aACf,mBAAiB,iBAGrB,sBAAKe,MAAM,OAAX,UACE,uBAAOI,IAAI,SAASJ,MAAM,aAA1B,0BAGA,uBACEK,UAAQ,EACRC,KAAK,SACLV,KAAK,SACLI,MAAM,eACNO,GAAG,SACHf,MAAOE,KAAKd,MAAME,OAClB0B,SAAUd,KAAKT,aACf,mBAAiB,iBAGrB,qBAAKe,MAAM,eAAX,SACE,wBACEM,KAAK,SACLN,MAAM,2CAFR,2BASLN,KAAKd,MAAMI,yB,GArGJyB,IAAMC,WAgHTC,MAJf,WACE,OAAO,cAAC,EAAD,KCvGMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d9783ac2.chunk.js","sourcesContent":["// import logo from \"./logo.svg\";\nimport React from \"react\";\nimport \"./\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass Bmi extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: \"\",\n      weight: \"\",\n      bmiValue: 0,\n      textWeightness: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.rankOfWeightness = this.rankOfWeightness.bind(this);\n  }\n\n  handleChange(event) {\n    let result = event.target.value;\n    if (result < 0) {\n      alert(\"Please, input a positive integer number!\");\n      return;\n    }\n    this.setState({ [event.target.name]: result });\n  }\n\n  handleSubmit(event) {\n    let { height, weight, bmiValue } = this.state;\n\n    bmiValue = weight / Math.pow(height / 100, 2);\n    let weightness = this.rankOfWeightness(bmiValue);\n    this.setState({\n      textWeightness: (\n        <div class=\"card  bg-black text-white\">\n          {\" \"}\n          <h4>{weightness}</h4>\n          <p>Result of BMI: {bmiValue}</p>\n        </div>\n      ),\n    });\n    event.preventDefault();\n  }\n\n  rankOfWeightness(num) {\n    if (num < 18.5) {\n      return \"Under Weight\";\n    } else if (num < 25) {\n      return \"Normal Weight\";\n    } else if (num < 30) {\n      return \"Overweight\";\n    } else if (num < 40) {\n      return \"Obesity\";\n    } else {\n      return \"Morbid Obesity\";\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 class=\"text-white mb-5\">Body Mass Index</h1>\n        <div class=\"main-card\">\n          <div class=\"card mb-5 bg-black text-white\">\n            <form onSubmit={this.handleSubmit}>\n              <div class=\"mb-3\">\n                <label for=\"height\" class=\"form-label\">\n                  Height in cm\n                </label>\n                <input\n                  required\n                  type=\"number\"\n                  name=\"height\"\n                  class=\"form-control\"\n                  id=\"height\"\n                  value={this.state.height}\n                  onChange={this.handleChange}\n                  aria-describedby=\"emailHelp\"\n                />\n              </div>\n              <div class=\"mb-3\">\n                <label for=\"weight\" class=\"form-label\">\n                  Weight in kg\n                </label>\n                <input\n                  required\n                  type=\"number\"\n                  name=\"weight\"\n                  class=\"form-control\"\n                  id=\"weight\"\n                  value={this.state.weight}\n                  onChange={this.handleChange}\n                  aria-describedby=\"emailHelp\"\n                />\n              </div>\n              <div class=\" text-center\">\n                <button\n                  type=\"submit\"\n                  class=\"btn btn-secondary justify-content-center\"\n                >\n                  Submit\n                </button>\n              </div>\n            </form>\n          </div>\n          {this.state.textWeightness}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return <Bmi />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}